ARMS - Adaptive Rejection Metropolis Sampling
_____________________________________________


by Wally Gilks

Medical Research Council Biostatistics Unit
Institute of Public Health
University Forvie Site
Robinson Way
Cambridge
CB2 2SR

e-mail: wally.gilks@mrc-bsu.cam.ac.uk

- - - - - - - - - - - - - - - - - - - - - - - -

This file last updated: May 7, 1997.

Introduction
____________

Adaptive rejection Metropolis sampling (ARMS) is a
method for efficiently sampling from complicated
univariate densities, such as typically occur in
applications of Gibbs sampling (Gilks, Best and Tan, 1995). 
ARMS is a generalisation
of the method of adaptive rejection sampling (ARS)
(Gilks (1992)), which was itself a development
of the original method proposed by Gilks and Wild (1992).
The ARMS generalisation includes a Metropolis step
to accomodate non-concavity in the log density.

These notes accompany a C function implementing ARMS
(together with an example calling program also in C).
It should be possible to call this C function
from a FORTRAN program, but I haven't tried this yet.
These notes describe how ARMS works, the arguments of the C 
function, and contain important notes on the use of
ARMS.

I hope you find this function useful. Please let me know
if you have any difficulties in using it. I also have a FORTRAN
subroutine for the Gilks and Wild (1992) method (see below).
Please let me know if you would like it.

Method
______

ARS works by constructing an envelope function of the log of
the target density, which is then used in rejection sampling 
(see, for example, Ripley (1987)). Whenever a point is
rejected by ARS, the envelope is updated to correspond more
closely to the true log density, thereby reducing the chance
of rejecting subsequent points. Fewer ARS rejection steps 
implies fewer point-evaluations of the log density. Such 
evaluations are typically very expensive computationally in
applications of Gibbs sampling. 

In the original formulation of ARS, the
envelope is constructed from a set of tangents to
the log-density (Gilks and Wild (1992)). In a later version
the envelope is constructed from chords (secants) 
intersecting on the log-density (Gilks (1992)). Both
methods assume that the log density is concave, which
is surprisingly often true even for very messy full 
conditional distributions encountered in Gibbs sampling.

Occasionally however log-concavity does not obtain,
typically in non-linear models, or with non-exponential-
family distributions. This can be particularly
frustrating when the target density is known to be very
nearly log-concave. ARMS deals with this situation by
performing a Metropolis step (Metropolis et al (1953)) on each
point accepted at an ARS rejection step. In the Metropolis step, 
the new point is weighed against the previous point sampled 
(in applications of Gibbs sampling this is the previous value
of the model parameter currently being updated by Gibbs). 
If the new point is rejected, the
previous point is retained as the new point. The procedure 
is exact (in the sense of returning samples from the exact
target density), regardless of the degree of convexity in the
log density. However it is most efficient (rejecting fewer 
points at the Metropolis step) when the density is 
approximately log-concave. Indeed, when the density is truly 
log-concave, the Metropolis step will never reject.

There is, however, an overhead in using ARMS instead of
ARS when the log density is truly log-concave. This is for
two reasons. Firstly, each call to the ARMS function will
require an additional point-evaluation of the log-density (to
prime the system for Metropolis); and secondly, when log-
concavity is assured, squeezing functions can be constructed
which may save a function evaluation at each ARS-rejection-
step. If sampling only one point from the density, (as is
typically the case for Gibbs sampling) the loss in
efficiency will be small. If many samples from the same density
are required, the loss in efficiency would be severe.
Therefore the ARMS function includes a parameter which allows
you to indicate if the density is known to be log-concave.
If indicated thus, the ARMS function will not implement
the Metropolis step, and will exit if non-concavity is
detected.

The ARMS function allows you to choose initial construction
points for the envelope; (I will continue to call the
ARMS rejection function an 'envelope', although for non-log-concave 
distributions this function is not in general an envelope any more). 
You can set these initial construction points anywhere you like; 
however, in applications of Gibbs sampling, when the distribution
to be sampled is not log-concave, it is important that initial
construction points are set independently of the current value of the
parameter being updated. (CAUTION: the advice given in Gilks, Best 
and Tan, 1995, to set initial construction points based on the previous 
Gibbs iterate, is only valid if the target density is log-concave; a 
corrigendum has been submitted to Applied Statistics). 
In many applications, for each variable to be updated by ARMS,
a fixed set of 4 or 5 initial construction points will suffice. 
When this would result in a large number of iterations of ARS,
some exploration of the density to be sampled may assist in 
choosing an efficient set of initial construction points.

Both ARS and ARMS can be used to generate many points from the target
density (although in applications of Gibbs sampling only one
point need be sampled from each target density). As the envelope
function used by both methods progressively adapts to the shape of
the target density, sampling becomes progressively more efficient
as more points are sampled from the target density.
If the target density is log-concave, the sampled points will be
independent from the exact target density. If there is non-log-
concavity, the samples will only be 'from' the target density in the
limit, i.e. only after many samples have been drawn, and even then
they will be dependent samples. Note that this is not a concern in 
applications of Gibbs sampling: only one point need be sampled as 
the stationary distribution (of the induced Markov chain) is preserved
by ARMS.




Arguments of the C function
___________________________

Note: ARMS can be called either through the arms function, or though the
arms_simple function, which has a simplified parameter list. A non-zero
return code indicates an error.

-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

int arms (double *xinit, int ninit, double *xl, double *xr,
         double (*myfunc)(double x, void *mydata), void *mydata,
         double *convex, int npoint, int dometrop, double *xprev,
         double *xsamp, int nsamp, double *qcent, double *xcent, int ncent,
         int *neval);

int arms_simple (int ninit, double *xl, double *xr,
	         double (*myfunc)(double x, void *mydata), void *mydata,
                 int dometrop, double *xprev, double *xsamp);

-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

xinit        : Pointer to first element of an array storing
               starting values for x in ascending order. SEE
               IMPORTANT NOTES ABOVE ON CHOICE OF STARTING VALUES
               (INITIAL CONSTRUCTION POINTS).
 
ninit        : Number of starting values supplied. Usually four
               will suffice.
 
xl           : Pointer to left bound. Bounds must be supplied even
               if the support is truly unbounded. This should
               present no problem if the bounds are set far enough out.
 
xr           : Pointer to right bound. Comments as for left bound.
 
myfunc       : A function to evaluate the log-density (user-supplied).
               This function should have two arguments, the first a 
               double holding the point x at which the log-density is
               to be evaluated; the second a pointer to a user-defined
               struct which must contain all the information needed
               to calculate the log-density at x. The function must
               return the value of the log-density (determined up to
               an arbitrary additive constant) at x.

mydata       : A pointer to the struct holding the data required by myfunc.
 
convex       : A pointer to a double. The double should be non-negative.
               We suggest setting the double to 1.0. If ARMS tends to keep
               sampling the same value, try a larger setting.
               Larger settings will make a larger envelope
               in regions of non-log-concavity.
 
npoint       : Maximum number of envelope points to be allowed. Setting 
               npoint=50 should be ample.

dometrop     : Whether metropolis step is required. Set dometrop=0 if you
               know the log-density is concave (see above); if you know it 
               isn't, or you're not sure, set dometrop=1.

xprev        : Pointer to a double holding the previous value from the Markov
               chain (see above).
 
xsamp        : Pointer to the first element of an array which is to hold
               sampled values from the target density.

nsamp        : The number of sampled values to be obtained (normally
               nsamp=1 in applications of Gibbs sampling).
 
qcent        : Pointer to start of an array holding requested percentages
               for envelope centiles. This may be useful if you want to
               generate some good initial values for the next updating
               of the current parameter (BUT SEE CAUTION ABOVE).
 
xcent        : Pointer to start of an array to hold the requested centiles.
 
ncent        : Number of centiles requested. Set ncent=0 if you don't want 
               centiles to be calculated.

neval        : Pointer to an int which will hold, on exit, the number of
               log-density evaluations that were performed.


IMPLEMENTATION NOTE
___________________ 

The program contains the statement:

#define RAND_MAX 2147483647      /* For Sun4 */

The constant RAND_MAX is used in function u_random, which returns a standard
uniform random variate. You might need to comment out this statement, or
reset it to be the largest integer that can be returned by the
library function rand().


References
__________

Gilks, W. R. (1992) Derivative-free adaptive rejection sampling
  for Gibbs sampling. Bayesian Statistics 4, (eds. Bernardo, J.,
  Berger, J., Dawid, A. P., and Smith, A. F. M.) Oxford 
  University Press.

Gilks, W. R., Best, N. G. and Tan, K. K. C. (1995) Adaptive
  rejection Metropolis sampling. Applied Statistics, 44, 455-472.

Gilks, W. R. and Wild, P. (1992) Adaptive rejection sampling
  for Gibbs sampling. Applied Statistics 41, pp 337-348.

Metropolis, N., Rosenbluth, A. W., Rosenbluth, M. N., Teller, A. H.
  and Teller, E. (1953) Equations of state calculations by fast
  computing machines. J. Chem. Phys., 21, 1087-1092.

Ripley, B. (1987) Stochastic Simulation. New York, Wiley. 

